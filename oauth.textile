h1. OAuth 인증

OpenAPI를 이용해서 응용 프로그램을 개발할 때는 기본적으로 고려해야 할 역할이 세 가지 있습니다. 서비스를 제공하는 springnote.com, 이런 라이브러리를 이용해서 개발한 응용 프로그램, 그리고 그 프로그램을 이용하는 최종사용자가 있습니다. 일반적으로 응용 프로그램이 사용자의 동의하에 springnote.com에 리소스를 요청하는 식으로 진행되지만, 어느 한 군데에서라도 상대방을 속이려고 하면 굉장히 복잡해질 수가 있습니다. 그래서 만들어진 것이 바로 OAuth 표준 인증 방식입니다.

h2. OAuth 방식

* 응용 프로그램이 서비스 제공자에게 리소스를 요청하기 위해서는 기본적으로 사용자의 동의가 필요합니다.
* 한번 동의를 받으면, 사용자나 서비스 제공자가 무력화시키기 전까지 응용 프로그램은 위임 받은 권한을 이용해서 반복해서 리소스를 요청할 수 있습니다.
* 따라서 인증이란 응용 프로그램이 이 권한(접근 토큰이라고 합니다)을 획득하는 과정으로 볼 수 있습니다.

h2. OAuth 순서

# 응용 프로그램이 서비스 제공자에게 요청 토큰을 달라고 해서 받습니다.
# 응용 프로그램은 요청 토큰을 기반으로 만든 URL을 가지고 사용자에게 직접 방문해서 사용 승인을 해달라고 부탁해야 합니다.
# 사용자는 직접 URL에 방문해서 승인을 하거나 거부할 수 있습니다. 이 과정은 자동화할 수 없습니다.
# 요청 토큰이 승인되었으므로, 이제 응용 프로그램은 서비스 제공자에게 요청 토큰을 보여주면서 접근 토큰을 달라고 해서 받습니다.
# 무하하하! 이제 마음껏 접근할 수 있습니다!

h2. 이 남자가 통신하는 방법 - OAuth Request

OAuth는 springnote.com에 가는 HTTP(S) request에 덧붙여집니다. 요청 URL, parameter를 잘 살펴본 후에 접근 토큰을 가지고 적당한 암호화 방식으로 암호화한 뒤에, header의 Authorization에 문자열 형태로 추가되어 전달됩니다. springnote.com은 요청을 받으면 헤더 안에 있는 Authorization을 다시 풀러서 제대로 허락을 받고 보낸 요청인지 등을 확인한 후에 요청을 처리해줍니다.

OAuth request를 만들 때 유의할 점
* parameter도 requset를 만드는 데 사용됩니다. 보통 URL 뒤에 "?domain=dev&sort-by=title" 이런 식으로 붙는 것을 말합니다.
* HTTPS 혹은 패킷 암호화

h2. HTTP(S)와 암호화 방식

HTTPS 프로토콜을 사용하면 SSL 위에서 HTTP 통신이 이루어지기 때문에 그만큼 더 안전합니다. HTTP에서는 내가 하는 요청을 다른 사람이 엿볼 수가 있기 때문에, 추가로 암호화를 해주는 것이 안전합니다.

OAuth에서는 HTTPS를 사용하던, 혹은 다른 여러 암호화 방식을 사용하던 서비스 제공자에게 맡기고 있습니다. springnote.com에서는 다음과 같은 방식으로 작동합니다.

 * 토큰을 요청할 때면 오직 HTTPS
 * 리소스를 요청할 때면 오직 HTTP
 * 암호화 방식은 무조건 HMAC-SHA1 방식

본 라이브러리에서는 가급적 OAuth로 골머리를 썩히지 않도록 하기 위해 노력했습니다만, 가끔씩 문제가 발생할 수가 있습니다. 어느날 갑자기 인증 문제가 생긴다고 느껴지면, verbose=True 인자를 활용해서 OAuth request가 제대로 만들어졌는지 확인해보세요.


